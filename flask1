from flask import Flask, request, jsonify
import sqlite3
import os

app = Flask(__name__)
DB_FILE = "reports.db"

# --- Initialize database ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS daily_reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS report_rows (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            report_id INTEGER,
            section TEXT,
            so_no TEXT,
            description TEXT,
            spring_a INTEGER,
            spring_b INTEGER,
            coir_a INTEGER,
            coir_b INTEGER,
            total INTEGER,
            FOREIGN KEY(report_id) REFERENCES daily_reports(id)
        )
    """)
    conn.commit()
    conn.close()

init_db()

# --- Save report ---
@app.route("/save", methods=["POST"])
def save_report():
    data = request.json
    date = data.get("date")

    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()

    # Remove existing report for the same date
    c.execute("DELETE FROM report_rows WHERE report_id IN (SELECT id FROM daily_reports WHERE date=?)", (date,))
    c.execute("DELETE FROM daily_reports WHERE date=?", (date,))

    # Insert new report
    c.execute("INSERT INTO daily_reports (date) VALUES (?)", (date,))
    report_id = c.lastrowid

    for section in ["accumulatedStatus", "machineOutputStatus", "shipmentStatus"]:
        rows = data.get(section, [])
        for r in rows:
            c.execute("""
                INSERT INTO report_rows
                (report_id, section, so_no, description, spring_a, spring_b, coir_a, coir_b, total)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (report_id, section, r[0], r[1], int(r[2] or 0), int(r[3] or 0),
                  int(r[4] or 0), int(r[5] or 0), int(r[6] or 0)))
    
    conn.commit()
    conn.close()
    return jsonify({"status": "ok", "date": date})

# --- Get all reports ---
@app.route("/reports", methods=["GET"])
def list_reports():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id, date FROM daily_reports ORDER BY date DESC")
    reports = [{"id": r[0], "date": r[1]} for r in c.fetchall()]
    conn.close()
    return jsonify(reports)

# --- Get single report ---
@app.route("/report/<date>", methods=["GET"])
def get_report(date):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id FROM daily_reports WHERE date=?", (date,))
    row = c.fetchone()
    if not row:
        return jsonify({"error": "Report not found"}), 404

    report_id = row[0]
    c.execute("SELECT section, so_no, description, spring_a, spring_b, coir_a, coir_b, total FROM report_rows WHERE report_id=?", (report_id,))
    rows = c.fetchall()
    conn.close()

    sections = {"accumulatedStatus": [], "machineOutputStatus": [], "shipmentStatus": []}
    for r in rows:
        sections[r[0]].append(list(r[1:]))

    return jsonify({"date": date, **sections})

if __name__ == "__main__":
    app.run(debug=True)
